<?xml version="1.0" encoding="UTF-8"?>
<!--Designed and generated by Altova StyleVision Enterprise Edition 2011 - see http://www.altova.com/stylevision for more information.-->
<xsl:stylesheet version="2.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:clitype="clitype" xmlns:d="http://schemas.microsoft.com/office/infopath/2009/WSSList/dataFields" xmlns:dfs="http://schemas.microsoft.com/office/infopath/2003/dataFormSolution" xmlns:dms="http://schemas.microsoft.com/office/2009/documentManagement/types" xmlns:fn="http://www.w3.org/2005/xpath-functions" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:iso4217="http://www.xbrl.org/2003/iso4217" xmlns:ix="http://www.xbrl.org/2008/inlineXBRL" xmlns:java="java" xmlns:link="http://www.xbrl.org/2003/linkbase" xmlns:ma="http://schemas.microsoft.com/office/2009/metadata/properties/metaAttributes" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:my="http://schemas.microsoft.com/office/infopath/2003/myXSD/2009-08-12T02:30:13" xmlns:ns1="http://schemas.xmlsoap.org/wsdl/" xmlns:ns2="http://schemas.microsoft.com/sharepoint/soap/" xmlns:ns3="http://nintex.com" xmlns:pc="http://schemas.microsoft.com/office/infopath/2007/PartnerControls" xmlns:q="http://schemas.microsoft.com/office/infopath/2009/WSSList/queryFields" xmlns:s0="http://microsoft.com/webservices/SharePointPortalServer/UserProfileService" xmlns:s1="http://microsoft.com/wsdl/types/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tm="http://microsoft.com/wsdl/mime/textMatching/" xmlns:udc="http://schemas.microsoft.com/office/infopath/2006/udc" xmlns:xbrldi="http://xbrl.org/2006/xbrldi" xmlns:xbrli="http://www.xbrl.org/2003/instance" xmlns:xd="http://schemas.microsoft.com/office/infopath/2003" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:altovaext="http://www.altova.com/xslt-extensions" xmlns:altova="http://www.altova.com" xmlns:fo="http://www.w3.org/1999/XSL/Format" xmlns:svg="http://www.w3.org/2000/svg" exclude-result-prefixes="#all">
	<xsl:output version="1.0" method="xml" encoding="UTF-8" indent="no"/>
	<xsl:param name="SV_OutputFormat" select="'PDF'"/>
	<xsl:param name="SV_GeneratedFileNameAmendment" as="xs:string?"/>
	<xsl:variable name="XML" select="/"/>
	<xsl:import-schema schema-location="myschema.xsd" namespace="http://schemas.microsoft.com/office/infopath/2003/myXSD/2009-08-12T02:30:13"/>
	<xsl:variable name="fo:layout-master-set">
		<fo:layout-master-set>
			<fo:simple-page-master master-name="page-master-195929184-even" margin-left="0.60in" margin-right="0.60in" page-height="11in" page-width="8.50in">
				<fo:region-body margin-top="0.79in" margin-bottom="0.79in" column-count="1" column-gap="0.50in"/>
				<fo:region-before region-name="even-page-header" overflow="hidden" extent="0.49in"/>
				<fo:region-after region-name="even-page-footer" overflow="hidden" extent="0.49in"/>
			</fo:simple-page-master>
			<fo:simple-page-master master-name="page-master-195929184-odd" margin-left="0.60in" margin-right="0.60in" page-height="11in" page-width="8.50in">
				<fo:region-body margin-top="0.79in" margin-bottom="0.79in" column-count="1" column-gap="0.50in"/>
				<fo:region-before region-name="odd-page-header" overflow="hidden" extent="0.49in"/>
				<fo:region-after region-name="odd-page-footer" overflow="hidden" extent="0.49in"/>
			</fo:simple-page-master>
			<fo:page-sequence-master master-name="page-master-195929184">
				<fo:repeatable-page-master-alternatives>
					<fo:conditional-page-master-reference master-reference="page-master-195929184-even" odd-or-even="even"/>
					<fo:conditional-page-master-reference master-reference="page-master-195929184-odd" odd-or-even="odd"/>
				</fo:repeatable-page-master-alternatives>
			</fo:page-sequence-master>
		</fo:layout-master-set>
	</xsl:variable>
	<xsl:variable name="altova:nPxPerIn" select="96"/>
	<xsl:variable name="altova:design-xslt-tree-view">
		<fo:root>
			<xsl:copy-of select="$fo:layout-master-set"/>
			<fo:page-sequence master-reference="page-master-195929184" initial-page-number="auto" format="1">
				<fo:static-content flow-name="odd-page-header">
					<fo:block-container margin-top="0.30in">
						<fo:block>
							<xsl:variable name="altova:table">
								<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
									<fo:table-column column-width="6.150in"/>
									<xsl:variable name="altova:CurrContextGrid_0BA762E8" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.15in">
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Incident Management Report:&#160; </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:IncidentID">
																	<altova:inline-container-substitute font-family="Calibri">
																		<xsl:apply-templates/>
																	</altova:inline-container-substitute>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="even-page-header">
					<fo:block-container margin-top="0.30in">
						<fo:block>
							<xsl:variable name="altova:table">
								<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
									<fo:table-column column-width="6.150in"/>
									<xsl:variable name="altova:CurrContextGrid_0BA762E8" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.15in">
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Incident Management Report:&#160; </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:IncidentID">
																	<altova:inline-container-substitute font-family="Calibri">
																		<xsl:apply-templates/>
																	</altova:inline-container-substitute>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="odd-page-footer">
					<fo:block-container height="0.490000in" overflow="hidden" display-align="after">
						<fo:block>
							<xsl:variable name="altova:table">
								<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
									<fo:table-column column-width="6.200in"/>
									<fo:table-column column-width="1in"/>
									<xsl:variable name="altova:CurrContextGrid_0BA76A08" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.07in">
												<fo:table-cell number-columns-spanned="2" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.20in">
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Incident ID: </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:IncidentID">
																	<altova:inline-container-substitute font-family="Calibri">
																		<xsl:apply-templates/>
																	</altova:inline-container-substitute>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; </xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="right">
														<fo:inline font-weight="bold">
															<xsl:text>Page:</xsl:text>
														</fo:inline>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<fo:page-number/>
														<fo:inline>
															<xsl:text>/</xsl:text>
														</fo:inline>
														<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
														<fo:inline font-weight="bold">
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:static-content flow-name="even-page-footer">
					<fo:block-container height="0.490000in" overflow="hidden" display-align="after">
						<fo:block>
							<xsl:variable name="altova:table">
								<fo:table width="100%" table-layout="fixed" border-spacing="2pt">
									<fo:table-column column-width="6.200in"/>
									<fo:table-column column-width="1in"/>
									<xsl:variable name="altova:CurrContextGrid_0BA76A08" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.07in">
												<fo:table-cell number-columns-spanned="2" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:block text-align="center">
															<fo:leader leader-pattern="rule" rule-thickness="1" leader-length="100%" color="black"/>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.20in">
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-weight="bold">
															<xsl:text>Incident ID: </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:IncidentID">
																	<altova:inline-container-substitute font-family="Calibri">
																		<xsl:apply-templates/>
																	</altova:inline-container-substitute>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; </xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="10pt" padding="0" display-align="center">
													<fo:block text-align="right">
														<fo:inline font-weight="bold">
															<xsl:text>Page:</xsl:text>
														</fo:inline>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<fo:page-number/>
														<fo:inline>
															<xsl:text>/</xsl:text>
														</fo:inline>
														<fo:page-number-citation ref-id="SV_RefID_PageTotal"/>
														<fo:inline font-weight="bold">
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
					</fo:block-container>
				</fo:static-content>
				<fo:flow flow-name="xsl-region-body">
					<fo:block>
						<fo:block margin="0pt" space-before="6pt" space-after="6pt">
							<xsl:variable name="altova:table">
								<fo:table font-family="Calibri" table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
									<fo:table-column column-width="1.800in"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_0BE71660" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.79in">
												<fo:table-cell background-color="#d2dcb4" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>QA e-Signautre</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left"/>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
						<altova:newline-handler/>
						<fo:block font-family="Calibri" margin="0pt" space-before="6pt" space-after="6pt">
							<xsl:variable name="altova:table">
								<fo:table table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
									<fo:table-column column-width="proportional-column-width(1)"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_0BA76F48" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.45in">
												<fo:table-cell border-left-color="white" border-top-color="white" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:block font-size="medium" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
															<fo:inline font-style="italic">
																<xsl:text>A - Reporting</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell background-color="#d2dcb4" font-family="inherit" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:block font-size="medium" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
															<fo:inline>
																<xsl:text>INCIDENT ID:</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:IncidentID">
																	<altova:inline-container-substitute>
																		<xsl:apply-templates/>
																	</altova:inline-container-substitute>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:variable name="altova:table">
								<fo:table table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
									<fo:table-column column-width="1.800in"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_0BB0D5F0" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row border-bottom-style="double" border-bottom-width="thick" border-top-style="double" border-top-width="thick" height="0.50in">
												<fo:table-cell background-color="#d2dcb4" font-size="medium" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<fo:inline>
															<xsl:text>SOURCE</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:variable name="altova:table">
															<fo:table border-color="white" table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
																<fo:table-column column-width="proportional-column-width(1)"/>
																<fo:table-column column-width="proportional-column-width(1)"/>
																<fo:table-column column-width="proportional-column-width(1)"/>
																<xsl:variable name="altova:CurrContextGrid_0BB0D950" select="."/>
																<xsl:variable name="altova:ColumnData">
																	<altova:Internal/>
																</xsl:variable>
																<fo:table-body start-indent="0pt">
																	<xsl:variable name="altova:tablerows">
																		<fo:table-row>
																			<fo:table-cell border-color="white" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
																				<fo:block text-align="left">
																					<xsl:choose>
																						<xsl:when test="string(.)='true'">
																							<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																								<xsl:text>&#x2714;</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:when test="string(.)='1'">
																							<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																								<xsl:text>&#x2714;</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline border="solid 1pt black">
																								<fo:leader leader-length="10pt" leader-pattern="space"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:inline>
																						<xsl:text> Audit Observation</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border-color="white" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
																				<fo:block text-align="left">
																					<xsl:choose>
																						<xsl:when test="string(.)='true'">
																							<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																								<xsl:text>&#x2714;</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:when test="string(.)='1'">
																							<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																								<xsl:text>&#x2714;</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline border="solid 1pt black">
																								<fo:leader leader-length="10pt" leader-pattern="space"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:inline>
																						<xsl:text> Procedure Deviation</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border-color="white" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
																				<fo:block text-align="left">
																					<xsl:choose>
																						<xsl:when test="string(.)='true'">
																							<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																								<xsl:text>&#x2714;</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:when test="string(.)='1'">
																							<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																								<xsl:text>&#x2714;</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline border="solid 1pt black">
																								<fo:leader leader-length="10pt" leader-pattern="space"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:inline>
																						<xsl:text> Complaint</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:table-cell>
																		</fo:table-row>
																		<fo:table-row>
																			<fo:table-cell border-color="white" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
																				<fo:block text-align="left">
																					<xsl:choose>
																						<xsl:when test="string(.)='true'">
																							<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																								<xsl:text>&#x2714;</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:when test="string(.)='1'">
																							<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																								<xsl:text>&#x2714;</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline border="solid 1pt black">
																								<fo:leader leader-length="10pt" leader-pattern="space"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:inline>
																						<xsl:text> Management Review</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border-color="white" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
																				<fo:block text-align="left">
																					<xsl:choose>
																						<xsl:when test="string(.)='true'">
																							<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																								<xsl:text>&#x2714;</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:when test="string(.)='1'">
																							<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																								<xsl:text>&#x2714;</xsl:text>
																							</fo:inline>
																						</xsl:when>
																						<xsl:otherwise>
																							<fo:inline border="solid 1pt black">
																								<fo:leader leader-length="10pt" leader-pattern="space"/>
																							</fo:inline>
																						</xsl:otherwise>
																					</xsl:choose>
																					<fo:inline>
																						<xsl:text> Other:</xsl:text>
																					</fo:inline>
																				</fo:block>
																			</fo:table-cell>
																			<fo:table-cell border-color="white" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
																				<fo:block text-align="left"/>
																			</fo:table-cell>
																		</fo:table-row>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
																			<xsl:copy-of select="$altova:tablerows"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:table-row>
																				<fo:table-cell>
																					<fo:block/>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:otherwise>
																	</xsl:choose>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="not($altova:table//fo:table-row)"/>
															<xsl:otherwise>
																<xsl:copy-of select="$altova:table"/>
															</xsl:otherwise>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.35in">
												<fo:table-cell number-columns-spanned="4" background-color="#d2dcb4" font-size="medium" font-weight="bold" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-style="italic">
															<xsl:text>Source Description</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.39in">
												<fo:table-cell background-color="#d2dcb4" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>ORIGINATING</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<fo:inline>
															<xsl:text>DEPARTMENT</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionA">
																	<xsl:for-each select="@my:IncidentOriginatingDepartment">
																		<fo:inline>
																			<xsl:value-of select="string(.)"/>
																		</fo:inline>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.60in">
												<fo:table-cell background-color="#d2dcb4" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>DESCRIPTION</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionA">
																	<xsl:for-each select="my:IncidentDescription">
																		<altova:inline-container-substitute>
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.40in">
												<fo:table-cell background-color="#d2dcb4" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>RISK RATING</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionA">
																	<xsl:for-each select="my:IncidentUrgency = &quot;Critical&quot;">
																		<xsl:choose>
																			<xsl:when test="string(.)='true'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="string(.)='1'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline border="solid 1pt black">
																					<fo:leader leader-length="10pt" leader-pattern="space"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Critical</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionA">
																	<xsl:for-each select="my:IncidentUrgency = &quot;Major&quot;">
																		<xsl:choose>
																			<xsl:when test="string(.)='true'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="string(.)='1'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline border="solid 1pt black">
																					<fo:leader leader-length="10pt" leader-pattern="space"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Major</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionA">
																	<xsl:for-each select="my:IncidentUrgency = &quot;Minor&quot;">
																		<xsl:choose>
																			<xsl:when test="string(.)='true'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="string(.)='1'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline border="solid 1pt black">
																					<fo:leader leader-length="10pt" leader-pattern="space"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Minor</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.60in">
												<fo:table-cell background-color="#d2dcb4" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>AFFECTED DEPARTMENT</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:variable name="altova:table">
															<fo:table table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
																<fo:table-column column-width="proportional-column-width(1)"/>
																<xsl:variable name="altova:CurrContextGrid_0BB0F070" select="."/>
																<xsl:variable name="altova:ColumnData">
																	<altova:Internal/>
																</xsl:variable>
																<fo:table-body start-indent="0pt">
																	<xsl:variable name="altova:tablerows">
																		<xsl:for-each select="$XML">
																			<xsl:for-each select="my:IncidentForm">
																				<xsl:for-each select="my:SectionA">
																					<xsl:for-each select="my:AffectedDepts">
																						<xsl:for-each select="my:AffectedDepartments">
																							<fo:table-row>
																								<fo:table-cell border-color="white" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
																									<fo:block text-align="left">
																										<altova:inline-container-substitute>
																											<xsl:apply-templates/>
																										</altova:inline-container-substitute>
																									</fo:block>
																								</fo:table-cell>
																							</fo:table-row>
																						</xsl:for-each>
																					</xsl:for-each>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:variable>
																	<xsl:choose>
																		<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
																			<xsl:copy-of select="$altova:tablerows"/>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:table-row>
																				<fo:table-cell>
																					<fo:block/>
																				</fo:table-cell>
																			</fo:table-row>
																		</xsl:otherwise>
																	</xsl:choose>
																</fo:table-body>
															</fo:table>
														</xsl:variable>
														<xsl:choose>
															<xsl:when test="not($altova:table//fo:table-row)"/>
															<xsl:otherwise>
																<xsl:copy-of select="$altova:table"/>
															</xsl:otherwise>
														</xsl:choose>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.60in">
												<fo:table-cell background-color="#d2dcb4" font-family="Calibri" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-size="small">
															<xsl:text>REFERENCES</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-family="Calibri" font-size="small" text-decoration="underline">
															<xsl:text>ID</xsl:text>
														</fo:inline>
														<fo:inline font-family="Calibri">
															<xsl:text>:</xsl:text>
														</fo:inline>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<xsl:if test="not(empty($XML/my:IncidentForm/my:SectionA/my:IssueReference/@my:ProductReferenceID))">
															<xsl:for-each select="$XML">
																<xsl:for-each select="my:IncidentForm">
																	<xsl:for-each select="my:SectionA">
																		<xsl:for-each select="my:IssueReference">
																			<xsl:for-each select="@my:ProductReferenceID">
																				<fo:inline font-size="small">
																					<xsl:value-of select="string(.)"/>
																				</fo:inline>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
														<altova:newline-handler/>
														<fo:inline font-size="small" text-decoration="underline">
															<xsl:text>Description</xsl:text>
														</fo:inline>
														<fo:inline>
															<xsl:text>: </xsl:text>
														</fo:inline>
														<xsl:if test="not(empty($XML/my:IncidentForm/my:SectionA/my:IssueReference/my:ReferenceDescription))">
															<xsl:for-each select="$XML">
																<xsl:for-each select="my:IncidentForm">
																	<xsl:for-each select="my:SectionA">
																		<xsl:for-each select="my:IssueReference">
																			<xsl:for-each select="my:ReferenceDescription">
																				<altova:inline-container-substitute font-family="Calibri" font-size="small">
																					<xsl:apply-templates/>
																				</altova:inline-container-substitute>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.60in">
												<fo:table-cell background-color="#d2dcb4" border-bottom-style="double" border-bottom-width="thick" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-family="Calibri">
															<xsl:text>IMMEDIATE REMEDIAL ACTIONS TAKEN</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell number-columns-spanned="3" border-bottom-style="double" border-bottom-width="thick" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionA">
																	<xsl:for-each select="my:ActionsTakenYN">
																		<xsl:choose>
																			<xsl:when test="string(.)='true'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="string(.)='1'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline border="solid 1pt black">
																					<fo:leader leader-length="10pt" leader-pattern="space"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Yes </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionA">
																	<xsl:for-each select="my:ActionsTakenYN">
																		<xsl:choose>
																			<xsl:when test="string(.)='false'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="string(.)='0'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline border="solid 1pt black">
																					<fo:leader leader-length="10pt" leader-pattern="space"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> No</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<altova:newline-handler/>
														<fo:inline text-decoration="underline">
															<xsl:text>IF Yes, SPECIFY</xsl:text>
														</fo:inline>
														<fo:inline>
															<xsl:text>: </xsl:text>
														</fo:inline>
														<xsl:if test="$XML/my:IncidentForm/my:SectionA/my:ActionsTakenYN">
															<xsl:for-each select="$XML">
																<xsl:for-each select="my:IncidentForm">
																	<xsl:for-each select="my:SectionA">
																		<xsl:for-each select="my:ActionsTakenGroup">
																			<xsl:for-each select="my:ActionTakenDescription">
																				<altova:inline-container-substitute>
																					<xsl:apply-templates/>
																				</altova:inline-container-substitute>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
														<altova:newline-handler/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:variable name="altova:table">
								<fo:table table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
									<fo:table-column column-width="proportional-column-width(1)"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_0BB5C028" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.35in">
												<fo:table-cell number-columns-spanned="2" background-color="#d2dcb4" border-top-style="double" border-top-width="thick" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-style="italic" font-weight="bold">
															<xsl:text>Reported by</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d2dcb4" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<fo:inline>
															<xsl:text>NAME</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell background-color="#d2dcb4" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<fo:inline>
															<xsl:text>DATE &amp; TIME</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell border-bottom-style="double" border-bottom-width="thick" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionA">
																	<xsl:for-each select="@my:IncidentReportedBy">
																		<fo:inline>
																			<xsl:value-of select="string(.)"/>
																		</fo:inline>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-style="double" border-bottom-width="thick" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionA">
																	<xsl:for-each select="my:IncidentInitiationDate">
																		<fo:inline>
																			<xsl:value-of select="format-number(number(substring(string(string(.)), 9, 2)), '00')"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:text> </xsl:text>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:call-template name="DateToMonthName">
																					<xsl:with-param name="sDate" select="string(string(.))"/>
																					<xsl:with-param name="sFormat" select="'short'"/>
																				</xsl:call-template>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:text> </xsl:text>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:value-of select="format-number(number(substring(string(string(string(.))), 1, 4)), '0000')"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:text>, </xsl:text>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:value-of select="format-number(number(substring(string(string(.)), 12, 2)), '00')"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:text>:</xsl:text>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:value-of select="format-number(number(substring(string(string(.)), 15, 2)), '00')"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:text>:</xsl:text>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:choose>
																				<xsl:when test="contains(string(string(.)), 'Z')">
																					<xsl:value-of select="format-number(number(substring-after(substring-after(substring-before(string(string(.)), 'Z'), ':'), ':')), '00')"/>
																				</xsl:when>
																				<xsl:when test="contains(string(string(.)), '+')">
																					<xsl:value-of select="format-number(number(substring-after(substring-after(substring-before(string(string(.)), '+'), ':'), ':')), '00')"/>
																				</xsl:when>
																				<xsl:when test="contains(substring(string(string(.)), 18), '-')">
																					<xsl:value-of select="format-number(number(substring-before(substring(string(string(.)), 18), '-')), '00')"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="format-number(number(substring(string(string(.)), 18)), '00')"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</fo:inline>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
						<altova:newline-handler/>
						<altova:newline-handler/>
						<fo:block font-family="Calibri" margin="0pt" space-before="6pt" space-after="6pt">
							<xsl:variable name="altova:table">
								<fo:table page-break-after="avoid" table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_0BB5C508" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.45in">
												<fo:table-cell border-color="white" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:block font-family="Calibri" font-size="medium" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
															<fo:inline font-style="italic">
																<xsl:text>B - Review and Analysis</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:variable name="altova:table">
								<fo:table page-break-inside="avoid" table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
									<fo:table-column column-width="1.800in"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_0BB5C688" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.60in">
												<fo:table-cell background-color="#d2dcb4" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>IS THE INCIDENT VALID</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:IncidentValid = &quot;Valid&quot;">
																		<xsl:choose>
																			<xsl:when test="string(.)='true'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="string(.)='1'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline border="solid 1pt black">
																					<fo:leader leader-length="10pt" leader-pattern="space"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Yes </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:IncidentValid != &quot;Valid&quot;">
																		<xsl:choose>
																			<xsl:when test="string(.)='true'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="string(.)='1'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline border="solid 1pt black">
																					<fo:leader leader-length="10pt" leader-pattern="space"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> No</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<altova:newline-handler/>
														<fo:inline text-decoration="underline">
															<xsl:text>IF No, RATIONAL</xsl:text>
														</fo:inline>
														<fo:inline>
															<xsl:text>: </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:InvalidJustification">
																		<altova:inline-container-substitute>
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.60in">
												<fo:table-cell background-color="#d2dcb4" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>REVIEW SUMMARY/</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<fo:inline>
															<xsl:text>IMPACT ANALYSIS</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:RootCauseAnalysis">
																			<altova:inline-container-substitute>
																				<xsl:apply-templates/>
																			</altova:inline-container-substitute>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="1.20in">
												<fo:table-cell background-color="#d2dcb4" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>INCIDENT CAUSED BY</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:RootCauseCategory = &quot;Unknown - Root Cause not found&quot;">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline font-size="small">
															<xsl:text>Unknown - Root Cause not found</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:RootCauseCategory = &quot;Insufficient Training&quot;">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<fo:inline font-size="small">
															<xsl:text>Insufficient Training</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:RootCauseCategory = &quot;Procedure Ambiguity&quot;">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<fo:inline font-size="small">
															<xsl:text>Procedure Ambiguity</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:RootCauseCategory = &quot;Unforeseen Change Impact / Risk&quot;">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline font-size="small">
															<xsl:text> Unforeseen Change Impact / Risk</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:RootCauseCategory = &quot;Human Error&quot;">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline font-size="small">
															<xsl:text> Human Error</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:RootCauseCategory = &quot;Safety Precaution&quot;">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline font-size="small">
															<xsl:text> Safety Precaution</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:RootCauseCategory = &quot;Continuous Improvement Error&quot;">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline font-size="small">
															<xsl:text> Continuous Improvement Error</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:RootCauseCategory = &quot;Procedure Discrepancy&quot;">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline font-size="small">
															<xsl:text> Procedure Discrepancy</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:RootCauseCategory = &quot;Faulty Equipment&quot;">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline font-size="small">
															<xsl:text> Faulty Equipment</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="not((my:RootCauseCategory != &quot;Unknown - Root Cause not found&quot; and my:RootCauseCategory != &quot;Insufficient Training&quot;) and (my:RootCauseCategory != &quot;Procedure Ambiguity&quot; and my:RootCauseCategory != &quot;Unforeseen Change Impact / Risk&quot;) and (my:RootCauseCategory != &quot;Human Error&quot;) and (my:RootCauseCategory != &quot;Safety Precaution&quot;) and (my:RootCauseCategory != &quot;Continuous Improvement Error&quot;) and (my:RootCauseCategory != &quot;Procedure Discrepancy&quot; and my:RootCauseCategory != &quot;Faulty Equipment&quot;))">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline font-size="small">
															<xsl:text> Other:</xsl:text>
														</fo:inline>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<xsl:if test="(my:RootCauseCategory != &quot;Unknown - Root Cause not found&quot; and my:RootCauseCategory != &quot;Insufficient Training&quot;) and (my:RootCauseCategory != &quot;Procedure Ambiguity&quot; and my:RootCauseCategory != &quot;Unforeseen Change Impact / Risk&quot;) and (my:RootCauseCategory != &quot;Human Error&quot;) and (my:RootCauseCategory != &quot;Safety Precaution&quot;) and (my:RootCauseCategory != &quot;Continuous Improvement Error&quot;) and (my:RootCauseCategory != &quot;Procedure Discrepancy&quot; and my:RootCauseCategory != &quot;Faulty Equipment&quot;)">
															<xsl:for-each select="$XML">
																<xsl:for-each select="my:IncidentForm">
																	<xsl:for-each select="my:SectionB">
																		<xsl:for-each select="my:Investigation"/>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
														<altova:newline-handler/>
														<altova:newline-handler/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.81in">
												<fo:table-cell background-color="#d2dcb4" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-size="small">
															<xsl:text>ADDITIONAL ACTIONS PERFORMED</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:AdditionalActionSection">
																		<xsl:for-each select="one-or-more( my:AdditionalActionsTable/my:ActionDescription = &quot;Initiated Training Request&quot;)">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Initiated Training Request; #: </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:AdditionalActionSection">
																		<xsl:for-each select="my:AdditionalActionsTable">
																			<xsl:for-each select="my:TrainingRequestID">
																				<altova:inline-container-substitute text-decoration="underline">
																					<xsl:apply-templates/>
																				</altova:inline-container-substitute>
																				<fo:inline text-decoration="underline">
																					<xsl:text>&#160; </xsl:text>
																				</fo:inline>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:AdditionalActionSection">
																		<xsl:for-each select="one-or-more( my:AdditionalActionsTable/my:ActionDescription = &quot;Initiated Document Change Control&quot; )">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Initiated Document Change Control; #: </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:AdditionalActionSection">
																		<xsl:for-each select="my:AdditionalActionsTable">
																			<xsl:for-each select="my:DocumentChangeControlID">
																				<altova:inline-container-substitute text-decoration="underline">
																					<xsl:apply-templates/>
																				</altova:inline-container-substitute>
																				<fo:inline text-decoration="underline">
																					<xsl:text>&#160; </xsl:text>
																				</fo:inline>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:AdditionalActionSection">
																		<xsl:for-each select="one-or-more( my:AdditionalActionsTable/my:ActionDescription = &quot;Initiated System Change Control&quot; )">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Initiated System Change Control; #: </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:AdditionalActionSection">
																		<xsl:for-each select="my:AdditionalActionsTable">
																			<xsl:for-each select="my:SystemChangeControlID">
																				<altova:inline-container-substitute text-decoration="underline">
																					<xsl:apply-templates/>
																				</altova:inline-container-substitute>
																				<fo:inline text-decoration="underline">
																					<xsl:text>&#160; </xsl:text>
																				</fo:inline>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:AdditionalActionSection">
																		<xsl:for-each select="one-or-more( my:AdditionalActionsTable/my:ActionDescription = &quot;Initiated Deviation&quot; )">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Initiated Deviation; #: </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:AdditionalActionSection">
																		<xsl:for-each select="my:AdditionalActionsTable">
																			<xsl:for-each select="my:DeviationID">
																				<altova:inline-container-substitute text-decoration="underline">
																					<xsl:apply-templates/>
																				</altova:inline-container-substitute>
																				<fo:inline text-decoration="underline">
																					<xsl:text>&#160; </xsl:text>
																				</fo:inline>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:AdditionalActionSection">
																		<xsl:for-each select="one-or-more( (my:AdditionalActionsTable/my:ActionDescription = &quot;Initiated Deviation&quot; or my:AdditionalActionsTable/my:ActionDescription = &quot;Initiated System Change Control&quot; or my:AdditionalActionsTable/my:ActionDescription = &quot;Initiated Document Change Control&quot; or my:AdditionalActionsTable/my:ActionDescription = &quot;Initiated Training Request&quot;) = false())">
																			<xsl:choose>
																				<xsl:when test="string(.)='true'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:when test="string(.)='1'">
																					<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																						<xsl:text>&#x2714;</xsl:text>
																					</fo:inline>
																				</xsl:when>
																				<xsl:otherwise>
																					<fo:inline border="solid 1pt black">
																						<fo:leader leader-length="10pt" leader-pattern="space"/>
																					</fo:inline>
																				</xsl:otherwise>
																			</xsl:choose>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Other: </xsl:text>
														</fo:inline>
														<xsl:if test="my:AdditionalActionsTable/my:ActionDescription != &quot;Initiated Deviation&quot; and my:AdditionalActionsTable/my:ActionDescription != &quot;Initiated System Change Control&quot; and my:AdditionalActionsTable/my:ActionDescription != &quot;Initiated Document Change Control&quot; and my:AdditionalActionsTable/my:ActionDescription != &quot;Initiated Training Request&quot;">
															<xsl:for-each select="$XML">
																<xsl:for-each select="my:IncidentForm">
																	<xsl:for-each select="my:SectionB">
																		<xsl:for-each select="my:AdditionalActionSection">
																			<xsl:for-each select="my:AdditionalActionsTable">
																				<xsl:for-each select="my:ActionDescription">
																					<altova:inline-container-substitute>
																						<xsl:apply-templates/>
																					</altova:inline-container-substitute>
																				</xsl:for-each>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
														<altova:newline-handler/>
														<altova:newline-handler/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:variable name="altova:table">
								<fo:table table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
									<fo:table-column column-width="proportional-column-width(1)"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_0BB5D8E8" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.35in">
												<fo:table-cell number-columns-spanned="2" background-color="#d2dcb4" border-top-style="double" border-top-width="thick" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-style="italic" font-weight="bold">
															<xsl:text>Reviewed and analysed by</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d2dcb4" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<fo:inline>
															<xsl:text>NAME</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell background-color="#d2dcb4" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<fo:inline>
															<xsl:text>DATE &amp; TIME</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell border-bottom-style="double" border-bottom-width="thick" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:IncidentReview">
																			<xsl:for-each select="@my:IncidentReviewedBy">
																				<fo:inline>
																					<xsl:value-of select="string(.)"/>
																				</fo:inline>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-style="double" border-bottom-width="thick" font-size="small" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionB">
																	<xsl:for-each select="my:Investigation">
																		<xsl:for-each select="my:IncidentReview">
																			<xsl:for-each select="my:IncidentReviewedDate">
																				<fo:inline>
																					<xsl:value-of select="format-number(number(substring(string(string(.)), 9, 2)), '00')"/>
																					<xsl:variable name="sText" as="xs:string?">
																						<xsl:text> </xsl:text>
																					</xsl:variable>
																					<xsl:value-of select="$sText"/>
																					<xsl:variable name="sText" as="xs:string?">
																						<xsl:call-template name="DateToMonthName">
																							<xsl:with-param name="sDate" select="string(string(.))"/>
																							<xsl:with-param name="sFormat" select="'short'"/>
																						</xsl:call-template>
																					</xsl:variable>
																					<xsl:value-of select="$sText"/>
																					<xsl:variable name="sText" as="xs:string?">
																						<xsl:text> </xsl:text>
																					</xsl:variable>
																					<xsl:value-of select="$sText"/>
																					<xsl:value-of select="format-number(number(substring(string(string(string(.))), 1, 4)), '0000')"/>
																					<xsl:variable name="sText" as="xs:string?">
																						<xsl:text>, </xsl:text>
																					</xsl:variable>
																					<xsl:value-of select="$sText"/>
																					<xsl:value-of select="format-number(number(substring(string(string(.)), 12, 2)), '00')"/>
																					<xsl:variable name="sText" as="xs:string?">
																						<xsl:text>:</xsl:text>
																					</xsl:variable>
																					<xsl:value-of select="$sText"/>
																					<xsl:value-of select="format-number(number(substring(string(string(.)), 15, 2)), '00')"/>
																					<xsl:variable name="sText" as="xs:string?">
																						<xsl:text>:</xsl:text>
																					</xsl:variable>
																					<xsl:value-of select="$sText"/>
																					<xsl:choose>
																						<xsl:when test="contains(string(string(.)), 'Z')">
																							<xsl:value-of select="format-number(number(substring-after(substring-after(substring-before(string(string(.)), 'Z'), ':'), ':')), '00')"/>
																						</xsl:when>
																						<xsl:when test="contains(string(string(.)), '+')">
																							<xsl:value-of select="format-number(number(substring-after(substring-after(substring-before(string(string(.)), '+'), ':'), ':')), '00')"/>
																						</xsl:when>
																						<xsl:when test="contains(substring(string(string(.)), 18), '-')">
																							<xsl:value-of select="format-number(number(substring-before(substring(string(string(.)), 18), '-')), '00')"/>
																						</xsl:when>
																						<xsl:otherwise>
																							<xsl:value-of select="format-number(number(substring(string(string(.)), 18)), '00')"/>
																						</xsl:otherwise>
																					</xsl:choose>
																				</fo:inline>
																			</xsl:for-each>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
						<fo:block font-family="Calibri" margin="0pt" space-before="6pt" space-after="6pt">
							<xsl:variable name="altova:table">
								<fo:table page-break-after="avoid" page-break-inside="avoid" table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_0BB7E120" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.45in">
												<fo:table-cell border-color="white" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:block font-family="Calibri" font-size="medium" font-weight="bold" margin="0pt" space-before="6pt" space-after="6pt">
															<fo:inline font-style="italic">
																<xsl:text>C - Quality Assurance Review</xsl:text>
															</fo:inline>
														</fo:block>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:variable name="altova:table">
								<fo:table page-break-before="avoid" page-break-inside="avoid" table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
									<fo:table-column column-width="1.810in"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_0BB7E2A0" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.60in">
												<fo:table-cell background-color="#d2dcb4" font-size="small" page-break-before="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>OUTCOME</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="small" page-break-before="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionC">
																	<xsl:for-each select="my:IncidentOutcome = &quot;Incident resolved, no further actions required.&quot;">
																		<xsl:choose>
																			<xsl:when test="string(.)='true'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="string(.)='1'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline border="solid 1pt black">
																					<fo:leader leader-length="10pt" leader-pattern="space"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Incident resolved, no further actions required.</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionC">
																	<xsl:for-each select="not( my:IncidentOutcome = &quot;Incident resolved, no further actions required.&quot;)">
																		<xsl:choose>
																			<xsl:when test="string(.)='true'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:when test="string(.)='1'">
																				<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																					<xsl:text>&#x2714;</xsl:text>
																				</fo:inline>
																			</xsl:when>
																			<xsl:otherwise>
																				<fo:inline border="solid 1pt black">
																					<fo:leader leader-length="10pt" leader-pattern="space"/>
																				</fo:inline>
																			</xsl:otherwise>
																		</xsl:choose>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> Other: </xsl:text>
														</fo:inline>
														<xsl:if test="not( $XML/my:IncidentForm/my:SectionC/my:IncidentOutcome = &quot;Incident resolved, no further actions required.&quot; )">
															<xsl:for-each select="$XML">
																<xsl:for-each select="my:IncidentForm">
																	<xsl:for-each select="my:SectionC">
																		<xsl:for-each select="my:IncidentOutcome">
																			<altova:inline-container-substitute>
																				<xsl:apply-templates/>
																			</altova:inline-container-substitute>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:if>
														<altova:newline-handler/>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.60in">
												<fo:table-cell background-color="#d2dcb4" font-size="small" page-break-before="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>COMMENTS</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="small" page-break-before="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionC">
																	<xsl:for-each select="my:QAImpact_Assessment">
																		<altova:inline-container-substitute>
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row height="0.60in">
												<fo:table-cell background-color="#d2dcb4" font-size="small" page-break-before="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline>
															<xsl:text>INCIDENT STATUS</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell font-size="small" page-break-before="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:IncidentStatus = &quot;Closed&quot;">
																	<xsl:choose>
																		<xsl:when test="string(.)='true'">
																			<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																				<xsl:text>&#x2714;</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:when test="string(.)='1'">
																			<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																				<xsl:text>&#x2714;</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline border="solid 1pt black">
																				<fo:leader leader-length="10pt" leader-pattern="space"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text> APPROVED&#160;&#160;&#160;&#160; </xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:IncidentStatus = &quot;Rejected&quot;">
																	<xsl:choose>
																		<xsl:when test="string(.)='true'">
																			<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																				<xsl:text>&#x2714;</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:when test="string(.)='1'">
																			<fo:inline border="solid 1pt black" font-family="ZapfDingbats" font-size="10pt ">
																				<xsl:text>&#x2714;</xsl:text>
																			</fo:inline>
																		</xsl:when>
																		<xsl:otherwise>
																			<fo:inline border="solid 1pt black">
																				<fo:leader leader-length="10pt" leader-pattern="space"/>
																			</fo:inline>
																		</xsl:otherwise>
																	</xsl:choose>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
														<fo:inline>
															<xsl:text>&#160; REJECTED</xsl:text>
														</fo:inline>
														<altova:newline-handler/>
														<altova:newline-handler/>
														<fo:inline text-decoration="underline">
															<xsl:text>REJECTION RATIONAL:</xsl:text>
														</fo:inline>
														<fo:inline>
															<xsl:text>&#160;</xsl:text>
														</fo:inline>
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionC">
																	<xsl:for-each select="my:IR_Rejection">
																		<xsl:for-each select="my:Rejection_Rational">
																			<altova:inline-container-substitute>
																				<xsl:apply-templates/>
																			</altova:inline-container-substitute>
																		</xsl:for-each>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
							<xsl:variable name="altova:table">
								<fo:table page-break-before="avoid" page-break-inside="avoid" table-layout="fixed" width="100%" border="solid 1pt gray" border-spacing="2pt">
									<fo:table-column column-width="proportional-column-width(1)"/>
									<fo:table-column column-width="proportional-column-width(1)"/>
									<xsl:variable name="altova:CurrContextGrid_0BB7EA20" select="."/>
									<xsl:variable name="altova:ColumnData">
										<altova:Internal/>
									</xsl:variable>
									<fo:table-body start-indent="0pt">
										<xsl:variable name="altova:tablerows">
											<fo:table-row height="0.35in">
												<fo:table-cell number-columns-spanned="2" background-color="#d2dcb4" border-top-style="double" border-top-width="thick" page-break-before="avoid" page-break-inside="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="left">
														<fo:inline font-style="italic" font-weight="bold">
															<xsl:text>Performed by</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell background-color="#d2dcb4" page-break-before="avoid" page-break-inside="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<fo:inline>
															<xsl:text>NAME</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell background-color="#d2dcb4" page-break-before="avoid" page-break-inside="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<fo:inline>
															<xsl:text>DATE &amp; TIME</xsl:text>
														</fo:inline>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
											<fo:table-row>
												<fo:table-cell border-bottom-style="double" border-bottom-width="thick" font-size="small" page-break-before="avoid" page-break-inside="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionC">
																	<xsl:for-each select="my:QAApprover">
																		<altova:inline-container-substitute>
																			<xsl:apply-templates/>
																		</altova:inline-container-substitute>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
												<fo:table-cell border-bottom-style="double" border-bottom-width="thick" font-size="small" page-break-before="avoid" page-break-inside="avoid" border="solid 1pt gray" padding="2pt" display-align="center">
													<fo:block text-align="center">
														<xsl:for-each select="$XML">
															<xsl:for-each select="my:IncidentForm">
																<xsl:for-each select="my:SectionC">
																	<xsl:for-each select="my:QAApprovalDate">
																		<fo:inline>
																			<xsl:value-of select="format-number(number(substring(string(string(.)), 9, 2)), '00')"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:text> </xsl:text>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:call-template name="DateToMonthName">
																					<xsl:with-param name="sDate" select="string(string(.))"/>
																					<xsl:with-param name="sFormat" select="'short'"/>
																				</xsl:call-template>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:text> </xsl:text>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:value-of select="format-number(number(substring(string(string(string(.))), 1, 4)), '0000')"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:text>, </xsl:text>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:value-of select="format-number(number(substring(string(string(.)), 12, 2)), '00')"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:text>:</xsl:text>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:value-of select="format-number(number(substring(string(string(.)), 15, 2)), '00')"/>
																			<xsl:variable name="sText" as="xs:string?">
																				<xsl:text>:</xsl:text>
																			</xsl:variable>
																			<xsl:value-of select="$sText"/>
																			<xsl:choose>
																				<xsl:when test="contains(string(string(.)), 'Z')">
																					<xsl:value-of select="format-number(number(substring-after(substring-after(substring-before(string(string(.)), 'Z'), ':'), ':')), '00')"/>
																				</xsl:when>
																				<xsl:when test="contains(string(string(.)), '+')">
																					<xsl:value-of select="format-number(number(substring-after(substring-after(substring-before(string(string(.)), '+'), ':'), ':')), '00')"/>
																				</xsl:when>
																				<xsl:when test="contains(substring(string(string(.)), 18), '-')">
																					<xsl:value-of select="format-number(number(substring-before(substring(string(string(.)), 18), '-')), '00')"/>
																				</xsl:when>
																				<xsl:otherwise>
																					<xsl:value-of select="format-number(number(substring(string(string(.)), 18)), '00')"/>
																				</xsl:otherwise>
																			</xsl:choose>
																		</fo:inline>
																	</xsl:for-each>
																</xsl:for-each>
															</xsl:for-each>
														</xsl:for-each>
													</fo:block>
												</fo:table-cell>
											</fo:table-row>
										</xsl:variable>
										<xsl:choose>
											<xsl:when test="string($altova:tablerows) or not(empty($altova:tablerows//fo:external-graphic))">
												<xsl:copy-of select="$altova:tablerows"/>
											</xsl:when>
											<xsl:otherwise>
												<fo:table-row>
													<fo:table-cell>
														<fo:block/>
													</fo:table-cell>
												</fo:table-row>
											</xsl:otherwise>
										</xsl:choose>
									</fo:table-body>
								</fo:table>
							</xsl:variable>
							<xsl:choose>
								<xsl:when test="not($altova:table//fo:table-row)"/>
								<xsl:otherwise>
									<xsl:copy-of select="$altova:table"/>
								</xsl:otherwise>
							</xsl:choose>
						</fo:block>
					</fo:block>
					<fo:block id="SV_RefID_PageTotal"/>
				</fo:flow>
			</fo:page-sequence>
		</fo:root>
	</xsl:variable>
	<xsl:template name="DateToMonthName">
		<xsl:param name="sDate"/>
		<xsl:param name="sFormat"/>
		<xsl:choose>
			<xsl:when test="$sFormat = 'long'">
				<xsl:call-template name="DateToMonthNameLong">
					<xsl:with-param name="sDate" select="$sDate"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="DateToMonthNameShort">
					<xsl:with-param name="sDate" select="$sDate"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DateToMonthNameLong">
		<xsl:param name="sDate"/>
		<xsl:variable name="nMonth">
			<xsl:call-template name="DateToMonthNum">
				<xsl:with-param name="sDate" select="$sDate"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$nMonth = 1">January</xsl:when>
			<xsl:when test="$nMonth = 2">February</xsl:when>
			<xsl:when test="$nMonth = 3">March</xsl:when>
			<xsl:when test="$nMonth = 4">April</xsl:when>
			<xsl:when test="$nMonth = 5">May</xsl:when>
			<xsl:when test="$nMonth = 6">June</xsl:when>
			<xsl:when test="$nMonth = 7">July</xsl:when>
			<xsl:when test="$nMonth = 8">August</xsl:when>
			<xsl:when test="$nMonth = 9">September</xsl:when>
			<xsl:when test="$nMonth = 10">October</xsl:when>
			<xsl:when test="$nMonth = 11">November</xsl:when>
			<xsl:otherwise>December</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DateToMonthNum">
		<xsl:param name="sDate"/>
		<xsl:choose>
			<xsl:when test="starts-with($sDate, '--')">
				<xsl:value-of select="number(substring($sDate, 3, 2))"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="number(substring($sDate, 6, 2))"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="DateToMonthNameShort">
		<xsl:param name="sDate"/>
		<xsl:variable name="nMonth">
			<xsl:call-template name="DateToMonthNum">
				<xsl:with-param name="sDate" select="$sDate"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$nMonth = 1">Jan</xsl:when>
			<xsl:when test="$nMonth = 2">Feb</xsl:when>
			<xsl:when test="$nMonth = 3">Mar</xsl:when>
			<xsl:when test="$nMonth = 4">Apr</xsl:when>
			<xsl:when test="$nMonth = 5">May</xsl:when>
			<xsl:when test="$nMonth = 6">Jun</xsl:when>
			<xsl:when test="$nMonth = 7">Jul</xsl:when>
			<xsl:when test="$nMonth = 8">Aug</xsl:when>
			<xsl:when test="$nMonth = 9">Sep</xsl:when>
			<xsl:when test="$nMonth = 10">Oct</xsl:when>
			<xsl:when test="$nMonth = 11">Nov</xsl:when>
			<xsl:otherwise>Dec</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="double-backslash">
		<xsl:param name="text"/>
		<xsl:param name="text-length"/>
		<xsl:variable name="text-after-bs" select="substring-after($text, '\')"/>
		<xsl:variable name="text-after-bs-length" select="string-length($text-after-bs)"/>
		<xsl:choose>
			<xsl:when test="$text-after-bs-length = 0">
				<xsl:choose>
					<xsl:when test="substring($text, $text-length) = '\'">
						<xsl:value-of select="concat(substring($text,1,$text-length - 1), '\\')"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="$text"/>
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(substring($text,1,$text-length - $text-after-bs-length - 1), '\\')"/>
				<xsl:call-template name="double-backslash">
					<xsl:with-param name="text" select="$text-after-bs"/>
					<xsl:with-param name="text-length" select="$text-after-bs-length"/>
				</xsl:call-template>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:MakeValueAbsoluteIfPixels">
		<xsl:param name="sValue"/>
		<xsl:variable name="sBeforePx" select="substring-before($sValue, 'px')"/>
		<xsl:choose>
			<xsl:when test="$sBeforePx">
				<xsl:variable name="nLengthOfInteger">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="$sBeforePx"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:variable name="nPosOfInteger" select="string-length($sBeforePx) - $nLengthOfInteger + 1"/>
				<xsl:variable name="nValuePx" select="substring($sBeforePx, $nPosOfInteger)"/>
				<xsl:variable name="nValueIn" select="number($nValuePx) div number($altova:nPxPerIn)"/>
				<xsl:variable name="nLengthBeforeInteger" select="string-length($sBeforePx) - $nLengthOfInteger"/>
				<xsl:variable name="sRest">
					<xsl:call-template name="altova:MakeValueAbsoluteIfPixels">
						<xsl:with-param name="sValue" select="substring-after($sValue, 'px')"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="concat(substring($sBeforePx, 1, $nLengthBeforeInteger), string($nValueIn), 'in', $sRest)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$sValue"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="altova:GetCharCountOfIntegerAtEndOfString">
		<xsl:param name="sText"/>
		<xsl:variable name="sLen" select="string-length($sText)"/>
		<xsl:variable name="cLast" select="substring($sText, $sLen)"/>
		<xsl:choose>
			<xsl:when test="number($cLast) &gt;= 0 and number($cLast) &lt;= 9">
				<xsl:variable name="nResultOfRest">
					<xsl:call-template name="altova:GetCharCountOfIntegerAtEndOfString">
						<xsl:with-param name="sText" select="substring($sText, 1, $sLen - 1)"/>
					</xsl:call-template>
				</xsl:variable>
				<xsl:value-of select="$nResultOfRest + 1"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>0</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="/">
		<xsl:apply-templates select="$altova:design-xslt-tree-view" mode="second-step"/>
	</xsl:template>
	<xsl:template match="altova:inline-container-substitute" mode="second-step">
		<xsl:choose>
			<xsl:when test="empty(for $i in child::node() return index-of(('fo:block', 'fo:block-container', 'fo:list-block', 'fo:table'), name($i))) or name(../..) eq 'fo:list-item-body'">
				<fo:inline>
					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>
					<xsl:apply-templates mode="second-step"/>
				</fo:inline>
			</xsl:when>
			<xsl:otherwise>
				<fo:block>
					<xsl:copy-of select="@* except @altova-DisableOutputEscaping"/>
					<xsl:apply-templates mode="second-step"/>
				</fo:block>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="altova:basic-link-container" mode="second-step">
		<fo:block text-align-last="justify">
			<xsl:apply-templates mode="second-step"/>
		</fo:block>
	</xsl:template>
	<xsl:template match="altova:newline-handler" mode="second-step">
		<xsl:variable name="name-following-sibling" select="name(following-sibling::*[1])"/>
		<xsl:variable name="name-preceding-sibling" select="name(preceding-sibling::*[1])"/>
		<xsl:if test="($name-following-sibling and $name-following-sibling != 'fo:table' and $name-following-sibling != 'altova:newline-handler' and $name-preceding-sibling != 'altova:basic-link-container') or $name-preceding-sibling = 'altova:newline-handler'">
			<fo:block>
				<xsl:if test="($name-preceding-sibling != 'altova:inline-container-substitute' and $name-preceding-sibling != 'fo:inline' and $name-preceding-sibling != 'fo:basic-link') or ($name-following-sibling != 'altova:inline-container-substitute' and $name-following-sibling != 'fo:inline' and $name-following-sibling != 'fo:basic-link')">
					<fo:leader leader-pattern="space"/>
				</xsl:if>
			</fo:block>
		</xsl:if>
	</xsl:template>
	<xsl:template match="*|@*" mode="second-step">
		<xsl:copy>
			<xsl:apply-templates select="*|@* except @altova-DisableOutputEscaping|text()" mode="second-step"/>
		</xsl:copy>
	</xsl:template>
	<xsl:template match="text()" mode="second-step">
		<xsl:choose>
			<xsl:when test="../@altova-DisableOutputEscaping">
				<xsl:value-of select="." disable-output-escaping="yes"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:copy/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="altova:number" mode="second-step">
		<xsl:number level="single" count="fo:list-item" format="{@format}" from="fo:list-block"/>
	</xsl:template>
	<xsl:function name="altova:GetChartYValuesForSingleSeries">
		<xsl:param name="seqCategoryLeafPos" as="node()*"/>
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:for-each select="$seqCategoryLeafPos">
			<xsl:element name="altova:Value">
				<xsl:value-of select="altova:GetChartYValueForSingleSeriesPos($nodeSeriesLeafPos, ., $bValuesInCategory)"/>
			</xsl:element>
		</xsl:for-each>
	</xsl:function>
	<xsl:function name="altova:GetChartYValueForSingleSeriesPos">
		<xsl:param name="nodeSeriesLeafPos" as="node()"/>
		<xsl:param name="nodeCategoryLeafPos" as="node()"/>
		<xsl:param name="bValuesInCategory" as="xs:boolean"/>
		<xsl:variable name="altova:seqCategoryContextIds" select="$nodeCategoryLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:seqSeriesContextIds" select="$nodeSeriesLeafPos/altova:Context/@altova:ContextId" as="xs:string*"/>
		<xsl:variable name="altova:sCommonContextId" select="for $i in $altova:seqCategoryContextIds return if (some $j in $altova:seqSeriesContextIds satisfies $i eq $j) then $i else ()" as="xs:string*"/>
		<xsl:choose>
			<xsl:when test="count($altova:sCommonContextId) gt 1">
				<xsl:message select="concat('XBRL Chart: Error: Found several values instead of a single one (contexts: ', string-join($altova:sCommonContextId, ', '), ').')" terminate="yes"/>
			</xsl:when>
			<xsl:when test="count($altova:sCommonContextId) lt 1">
				<xsl:message select="concat('XBRL Chart: Info: No value found for position labeled &quot;', $nodeCategoryLeafPos/@altova:sLabel, '&quot;')" terminate="no"/>
				<xsl:sequence select="'altova:no-value'"/>
			</xsl:when>
			<xsl:when test="$bValuesInCategory">
				<xsl:sequence select="xs:string($nodeCategoryLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:sequence select="xs:string($nodeSeriesLeafPos/altova:Context[@altova:ContextId eq $altova:sCommonContextId]/@altova:Value)"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:function>
	<xsl:function name="altova:GetChartLabelForPos" as="xs:string">
		<xsl:param name="nodeParam" as="node()"/>
		<xsl:value-of select="string-join($nodeParam/ancestor-or-self::altova:Pos/@altova:sLabel, ' ')"/>
	</xsl:function>
</xsl:stylesheet>
